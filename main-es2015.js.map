{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/service/people.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<h1>Oauth2 Contact Access</h1>\\n<div>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"loadAllContacts()\\\">Access Contacts</button>\\n</div>\\n<hr>\\n<ul>\\n  <li *ngFor=\\\"let contact of contactList\\\">{{contact.name}} - {{contact.number}}</li>\\n</ul>\\n\\n<section>\\n  <h3>What is OAuth2 Contact Access?</h3>\\n  <p>\\n    A simple attempt to demonstrate OAuth2 usage with People API.\\n    <b>This application is only capable of demonstrate how to access peoples contacts when user authorizes.</b>\\n    It has been developed using Angular.\\n  </p>\\n</section>\\n\\n<section>\\n  <h3>Where is the source code?</h3>\\n  <p>\\n    You can find the source <a href=\\\"https://github.com/nuwanbandara/OAuth2Contacts\\\">here</a> @ GitHub.\\n  </p>\\n</section>\\n\\n<section>\\n  <h3>How does this work?</h3>\\n  <p>\\n    We use what known as <b>Delegated Authorization</b> to access user's contact list assuming user grant permissions or\\n    his or her Gmail Account grant permissions to do so as user trust google.\\n  </p>\\n  <p>\\n    We send a HTTP request to Google Authorization server with few meta data. Which includes three important\\n    things. <b>Redirect URI</b>, <b>Response Type</b>, <b>Scope</b>. In OAuth2 Implicit Flow Grant Type Response Type\\n    should be set to <b>Token</b>. This means if user consents to access his or her Google account,\\n    we ask to send us an access token which we can later use to access the Resource Server. Because in order to deal with resource server\\n    we are going to need an access token.\\n  </p>\\n</section>\\n\\n<section>\\n  <h3>Further Reading.</h3>\\n  <a href=\\\"https://developers.google.com/identity/choose-auth\\\">Google Identity Platform</a>\\n  <br>\\n  <a href=\\\"https://aaronparecki.com/oauth-2-simplified/\\\">OAuth 2 Simplified</a>\\n  <br>\\n  <a href=\\\"https://www.youtube.com/watch?v=996OiexHze0\\\">OAuth2 and OpenID Connect in Plain English</a>\\n</section>\\n\"","module.exports = \"h1, div {\\n  text-align: center;\\n  margin-top: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXFVzZXJzXFxOdXdhblxcRGVza3RvcFxcT0F1dGgyIFBlcnNvbnMvc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usa0JBQUE7RUFDQSxnQkFBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaDEsIGRpdntcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuIiwiaDEsIGRpdiB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn0iXX0= */\"","import {Component, OnInit} from '@angular/core';\nimport {PeopleService} from \"./service/people.service\";\nimport {ActivatedRoute, ActivatedRouteSnapshot} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n\n  contactList: Array<{name: string, number: string}> = [];\n\n  constructor(private route: ActivatedRoute, private peopleService: PeopleService) {\n  }\n\n  ngOnInit(): void {\n    this.route.fragment.subscribe(value => {\n      try{\n        const accessToken = value.split('&').find(value => {\n          return value.startsWith('access_token');\n        }).split('=')[1];\n        sessionStorage.setItem('access_token', accessToken);\n        this.loadAllContacts();\n      }catch (e) {\n        // do nothing\n      }\n    });\n  }\n\n  loadAllContacts(): void {\n    this.peopleService.readAllContacts().subscribe(value => {\n      this.contactList = [];\n      value.connections.forEach((value1, index) => {\n        this.contactList.push({\n          name: value1.names[0].displayName,\n          number: value1.phoneNumbers[0].value\n        });\n      })\n    });\n\n\n  }\n\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {RouterModule} from \"@angular/router\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    RouterModule.forRoot([{\n      path: \"\",\n      component: AppComponent\n    }])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {EMPTY,  Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  readAllContacts(): Observable<IPeopleResponse> {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n     window.location.replace('https://accounts.google.com/o/oauth2/v2/auth?client_id=509055025449-nhgv2hr6jis5sm5qj88li6rbtor6epim.apps.googleusercontent.com&response_type=token&scope=https://www.googleapis.com/auth/contacts.readonly&state=OAuth2ContactViewer&redirect_uri=http://localhost:4200');\n      return EMPTY;\n    } else {\n      return this.http.get<IPeopleResponse>('https://people.googleapis.com/v1/people/me/connections?personFields=names,phoneNumbers',{\n        headers: new HttpHeaders().set('Authorization', 'Bearer ' + token)\n      });\n    }\n  }\n}\n\ninterface IPeopleResponse{\n  connections: [{\n    names: [{\n      displayName: string\n    }],\n    phoneNumbers: [\n      {\n        value: string\n      }\n      ]\n  }]\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}